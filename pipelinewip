pipeline {
    agent { label 'built-in'    }
	environment {
        registry = "kss7/my-smart-app"
	    img = "$registry" + ":${env.BUILD_ID}"
        registryCredential = 'docker-hub-login' //withRegistry needs just credentialsId so give like this
		mailRecipients = "saratksingh@yahoo.com"
		jobName = "${currentBuild.fullDisplayName}"
    }
	 options {
        skipDefaultCheckout() //this option will Skip checking out code by default in all agents
    }
    stages {
        stage('Checkout') {
            steps {
				echo "Check code is downloaded"
                //git branch: 'main', url: 'https://github.com/kss7/CopyDelete.git'
				sh 'ls -la'
            }
        }
        stage('Test, Coverage, Static Analyis, Report') {
            parallel {
                stage('Test & Coverage') {
							agent {
								docker { image 'python:3.10-slim-buster' }
							}
                            steps {
                                echo " Testing And Code Coverage"
								sh 'ls -la'
								//sh returnStatus: true, script: 'bash ./jenkinsscript.sh'
                            }
							post {
								 always {
											echo "PostStage: Publish Test Report"
											//junit skipMarkingBuildUnstable: true, testResults: 'xmlReport/output.xml' 
								 }
							}
                        }
                stage('Static Analyis') {
					agent {
								docker { 
								image 'python:3.10-slim-buster' 
								args '--user 0:0'
								}
							}
                    steps {
                                echo "Static Analysis"
								sh 'ls -la'
								sh 'pip install flake8'
								sh returnStatus: true, script: 'flake8 mail/ utests/ > flake8out.text'
                    }
					post {
						 always {
									echo "PostStage: Publish Static Analysis"
									recordIssues enabledForFailure: true, tool: flake8(pattern: '*.text')
						 }
					}
                }
            }		
        }
	stage('Build Img') {
            steps {
				script {
					echo "Build docker image"
                    println ("${img}")
                 //   dockerImg = docker.build("${img}")
                }
            }
        }	
	stage('Release') {
            steps {
				script {
					echo "Push to docker hub"
                    //docker.withRegistry( 'https://registry.hub.docker.com ', registryCredential )  {
					//		dockerImg.push()
					//		dockerImg.push('latest') //one more push for latest tag
					//	}
                }
            }
        }	
    }
	post {
		always {
			echo "POST stage: Sending Mail"
			
			emailext body: 'Pls go to ${BUILD_URL} and verify!',
			mimeType: 'text/html',
			subject: "[Jenkins] ${jobName} - ${currentBuild.currentResult}",
			to: "${mailRecipients}",
			from: "Jenkins",
			replyTo: "${mailRecipients}",
			attachLog: true
		}
	}
}
